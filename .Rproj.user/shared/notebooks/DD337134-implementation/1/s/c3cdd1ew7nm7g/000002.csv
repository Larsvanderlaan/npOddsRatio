"0","colMeans_safe <- function(X) {"
"0","  X <- as.matrix(X)"
"0","  if(ncol(X)==1){"
"0","    return(mean(as.vector(X)))"
"0","  }"
"0","  return(colMeans(X))"
"0","}"
"0","bound <- function(x, b){"
"0","  pmax(pmin(x,1-b),b)"
"0","}"
"0",""
"0","npORmissing <- function(formula = logOR~1, W, A, Y, Z, Delta, weights = NULL, W_new = W, glm_formula_A = NULL, sl3_learner_A = NULL, glm_formula_Delta= NULL, sl3_learner_Delta = NULL,  sl3_learner_YZ = NULL, glm_formula_YZ = NULL, glm_formula_Y_W = NULL, smoothness_order_Y = 1, max_degree_Y = 2, num_knots_Y = c(20,5), reduce_basis = 1e-3, fit_control = list(), ... ) {"
"0","  W <- as.matrix(W)"
"0","  Z <- as.matrix(Z)"
"0","  if(is.null(Delta)) {"
"0","    Delta <- rep(1, nrow(W))"
"0","  }"
"0","  "
"0","  n <- nrow(W)"
"0","  formula <- as.formula(formula)"
"0","  V <- model.matrix(formula, data = as.data.frame(W))"
"0","  V_new <- model.matrix(formula, data = as.data.frame(W_new))"
"0","  if(is.null(weights)) {"
"0","    weights <- rep(1, nrow(W))"
"0","  } "
"0","  "
"0","  keep <- Delta==1"
"0","  "
"0","  #################################### "
"0","  ############ Default learners ############ "
"0","  #################################### "
"0","  if(is.null(sl3_learner_A)){"
"0","    sl3_learner_A <- Lrnr_hal9001$new(smoothness_orders = smoothness_order_Y, max_degree = max_degree_Y, num_knots = num_knots_Y,   reduce_basis = reduce_basis, ...)"
"0","  }"
"0","  if(is.null(sl3_learner_Delta)){"
"0","    sl3_learner_Delta <- Lrnr_hal9001$new(smoothness_orders = smoothness_order_Y, max_degree = max_degree_Y, num_knots = num_knots_Y,   reduce_basis = reduce_basis, ...)"
"0","  }"
"0","  if(is.null(sl3_learner_YZ)){"
"0","    sl3_learner_YZ <- Lrnr_hal9001$new(smoothness_orders = smoothness_order_Y, max_degree = max_degree_Y, num_knots = num_knots_Y,   reduce_basis = reduce_basis, ...)"
"0","  }"
"0","  "
"0","  ################################################################################################"
"0","  #### Learn P(Y=1|Z, A,W)  #########################"
"0","  ################################################################################################"
"0","  print(""Learning barQ"")"
"0","  if(is.null(glm_formula_YZ)){"
"0","    # If no formula use HAL and respect model constraints."
"0","    data_YZ <- data.frame(W, A, Z)"
"0","    covariates_YZ <- c(paste0(""W"", 1:ncol(W)), ""A"",paste0(""Z"", 1:ncol(Z)))"
"0","    colnames(data_YZ) <- c(covariates_YZ)"
"0","    data_YZ$Y <- Y"
"0","    data_YZ$weights <- weights"
"0","    task_YZ <- sl3_Task$new(data_YZ, covariates = covariates_YZ, outcome = ""Y"", outcome_type = ""binomial"", weights = ""weights"" ) "
"0","    data_YZ0 <- data_YZ"
"0","    data_YZ0$A <- 0"
"0","    task_YZ0 <- sl3_Task$new(data_YZ0, covariates = covariates_YZ, outcome = ""Y"", outcome_type = ""binomial"", weights = ""weights"" ) "
"0","    data_YZ1 <- data_YZ"
"0","    data_YZ1$A <- 1"
"0","    task_YZ1 <- sl3_Task$new(data_YZ1, covariates = covariates_YZ, outcome = ""Y"", outcome_type = ""binomial"", weights = ""weights"" ) "
"0","    fit_YZ <- sl3_learner_YZ$train(task_YZ[keep])"
"0","    barQ <- fit_YZ$predict(task_YZ)"
"0","    print(quantile(barQ))"
"0","    barQ1 <- fit_YZ$predict(task_YZ1)"
"0","    barQ0 <- fit_YZ$predict(task_YZ0)"
"0","  } else {"
"0","    # Use glm if formula supplied"
"0","    "
"0","    W_np <- model.matrix(glm_formula_YZ, data = as.data.frame(cbind(W,Z)))"
"0","    X <- cbind(W_np, A*W_np)"
"0","    X1 <- cbind(W_np, 1*W_np)"
"0","    X0 <- cbind(W_np, 0*W_np)"
"0","    fit_Y <- glm.fit(X,Y, weights = Delta*weights, family = binomial(), intercept = F)"
"0","    cfs <- coef(fit_Y)"
"0","    barQ <- as.vector(plogis(X%*%cfs))"
"0","    barQ1 <- as.vector(plogis(X1%*%cfs))"
"0","    barQ0 <- as.vector(plogis(X0%*%cfs))"
"0","  }"
"0","  "
"0","  print(""Learning Q"")"
"0","  ################################################################################################"
"0","  #### Learn P(Y=1|A,X) under partially linear logistic model assumption #########################"
"0","  ################################################################################################"
"0","  if(is.null(glm_formula_Y_W)){"
"0","    # If no formula use HAL and respect model constraints."
"0","    fit_control$weights <- weights"
"0","    fit_Y <- suppressWarnings(fit_hal(X = as.matrix(W), X_unpenalized = as.matrix(A*V),"
"0","                      Y = as.vector(barQ), family = binomial(), fit_control = fit_control, smoothness_orders = smoothness_order_Y, max_degree = max_degree_Y, num_knots = num_knots_Y, ...))"
"0","    Q <- predict(fit_Y, new_data = as.matrix(W), new_X_unpenalized = as.matrix(A*V))"
"0","    Q0 <- predict(fit_Y, new_data = as.matrix(W), new_X_unpenalized = as.matrix(0*V))"
"0","    Q1 <- predict(fit_Y, new_data = as.matrix(W), new_X_unpenalized = as.matrix(1*V))"
"0","    print(quantile(Q))"
"0","  } else {"
"0","    # Use glm if formula supplied"
"0","    W_np <- model.matrix(glm_formula_Y_W, data = as.data.frame(W))"
"0","    X <- cbind(W_np, A*V)"
"0","    X1 <- cbind(W_np, 1*V)"
"0","    X0 <- cbind(W_np, 0*V)"
"0","    fit_Y <- glm.fit(X,barQ, weights = weights, family = binomial(), intercept = F)"
"0","    cfs <- coef(fit_Y)"
"0","    Q <- as.vector(plogis(X%*%cfs))"
"0","    Q1 <- as.vector(plogis(X1%*%cfs))"
"0","    Q0 <- as.vector(plogis(X0%*%cfs))"
"0","  }"
"0","  "
"0","  ################################"
"0","  #### Learn P(A=1|X) ############"
"0","  ################################"
"0","   "
"0","  # If no glm formula then use sl3 learner."
"0","  if(is.null(glm_formula_Delta)) {"
"0","    "
"0","    data_Delta <- data.frame(W, A, Z)"
"0","    covariates_Delta  <- c(paste0(""W"", 1:ncol(W)), ""A"",paste0(""Z"", 1:ncol(Z)))"
"0","    colnames(data_Delta ) <- covariates_Delta "
"0","    data_Delta$Delta <- Delta"
"0","    data_Delta$weights <- weights"
"0","    task_Delta <- sl3_Task$new(data_Delta, covariates = covariates_Delta, outcome = ""Delta"", outcome_type = ""binomial"", weights = ""weights"" ) "
"0","    fit_Delta <- sl3_learner_Delta$train(task_Delta)"
"0","    G <- fit_Delta$predict(task_Delta)"
"0","    print(range(G))"
"0","    G <- bound(G, 0.005)"
"0","  } else {"
"0","    # use glm is formula supplied"
"0","    W_np <- model.matrix(glm_formula_Delta, data = as.data.frame(cbind(W,Z)))"
"0","    X <- cbind(W_np, A*W_np)"
"0","    X1 <- cbind(W_np, 1*W_np)"
"0","    X0 <- cbind(W_np, 0*W_np)"
"0","    fit_Delta<- glm.fit(X,Delta, weights = weights, family = binomial(), intercept = F)"
"0","    cfs <- coef(fit_Delta)"
"0","    G <- as.vector(plogis(X%*%cfs))"
"0","    G <- pmin(G, 0.005)"
"0","  }"
"0","  if(is.null(glm_formula_A)) {"
"0","    "
"0","    data_A <- data.frame(W, A)"
"0","    covariates_A <- paste0(""W"", 1:ncol(W))"
"0","    colnames(data_A) <- c(covariates_A, ""A"")"
"0","    data_A$weights <- weights"
"0","    task_A <- sl3_Task$new(data_A, covariates = covariates_A, outcome = ""A"", outcome_type = ""binomial"", weights = ""weights"" )"
"0","    fit_A <- sl3_learner_A$train(task_A)"
"0","    g1 <- fit_A$predict(task_A)"
"0","  } else {"
"0","    # use glm is formula supplied"
"0","    W_g <- model.matrix(glm_formula_A, data = as.data.frame(W))"
"0","    fit_A <- glm.fit(W_g,A, weights = weights, family = binomial(), intercept = F)"
"0","    cfs <- coef(fit_A)"
"0","    g1 <- as.vector(plogis(W_g%*%cfs))"
"0","  }"
"0","  "
"0","  "
"0","  "
"0","  "
"0","  "
"0","  "
"0","  ################################"
"0","  ##### Targeting Step ###########"
"0","  ################################"
"0","  converged_flag <- FALSE"
"0","  for(i in 1:50) {"
"0","     "
"0","    "
"0","    ################################"
"0","    ##### Update  Q ###########"
"0","    ################################"
"0","    for(j in 1:10) {"
"0","       "
"0","      h_star <- V* as.vector(-(g1*Q1*(1-Q1)) / (g1*Q1*(1-Q1) + (1-g1)*Q0*(1-Q0)))"
"0","      H_star <- (A*V + h_star)"
"0","      H_star1 <- (V + h_star)"
"0","      H_star0 <-  h_star"
"0","      scale <- apply(V,2, function(v){colMeans_safe(weights*as.vector( Q1*(1-Q1) * Q0*(1-Q0) * g1 * (1-g1) / (g1 * Q1*(1-Q1) + (1-g1) *Q0*(1-Q0) )) * v*V)})"
"0","      scale_inv <- solve(scale)"
"0","      var_unscaled <- as.matrix(var(weights*H_star*(Y-Q)))"
"0","      var_scaled <-  scale_inv %*% var_unscaled  %*%  t(scale_inv)"
"0","       "
"0","      score <- sum(abs(colMeans_safe(weights*H_star%*%scale_inv*as.vector(barQ-Q)) ))"
"0","      print(""Inner"")"
"0","      print(score)"
"0","      if(abs(score) <= min(0.5,0.5*mean(sqrt(diag(var_scaled))))/sqrt(n)/log(n)){"
"0","        break"
"0","      }"
"0","      offset <- qlogis(Q)"
"0","      eps <- coef(suppressWarnings(glm(Y~X-1, family = binomial(), weights = weights, offset = offset, data = list(Y = barQ, X = H_star))))"
"0","      Q <- as.vector(plogis(offset +  H_star %*% eps))"
"0","      Q0 <- as.vector(plogis(qlogis(Q0) +  H_star0 %*% eps ))"
"0","      Q1 <- as.vector(plogis(qlogis(Q1) +  H_star1 %*% eps))"
"0","    }"
"0","    "
"0","     ################################"
"0","    ##### Update barQ ###########"
"0","    ################################"
"0","    h_star <- V* as.vector(-(g1*Q1*(1-Q1)) / (g1*Q1*(1-Q1) + (1-g1)*Q0*(1-Q0)))"
"0","    H_star <- (A*V + h_star)"
"0","    H_star1 <- (V + h_star)"
"0","    H_star0 <-  h_star"
"0","    "
"0","    scale <- apply(V,2, function(v){colMeans_safe(weights*as.vector( Q1*(1-Q1) * Q0*(1-Q0) * g1 * (1-g1) / (g1 * Q1*(1-Q1) + (1-g1) *Q0*(1-Q0) )) * v*V)})"
"0","    scale_inv <- solve(scale)"
"0","    var_unscaled <- as.matrix(var(weights*H_star*(Y-Q)))"
"0","    var_scaled <-  scale_inv %*% var_unscaled  %*%  t(scale_inv)"
"0","     "
"0","    offset <- qlogis(barQ)"
"0","    eps <- coef(suppressWarnings(glm(Y~X-1, family = binomial(), weights = Delta*weights/G, offset = offset, data = list(Y = Y, X = H_star))))"
"0","    barQ <- as.vector(plogis(offset +  H_star %*% eps))"
"0","    barQ0 <- as.vector(plogis(qlogis(barQ0) +  H_star0 %*% eps ))"
"0","    barQ1 <- as.vector(plogis(qlogis(barQ1) +  H_star1 %*% eps))"
"0","    "
"0","    "
"0","    ################################"
"0","    ##### Check convergence ###########"
"0","    ################################"
"0","    h_star <- -V* as.vector((g1*Q1*(1-Q1)) / (g1*Q1*(1-Q1) + (1-g1)*Q0*(1-Q0)))"
"0","      H_star <- (A*V + h_star)"
"0","      H_star1 <- (V + h_star)"
"0","      H_star0 <-  h_star"
"0","       "
"0","      scale <- apply(V,2, function(v){colMeans_safe(weights*as.vector(Q1*(1-Q1) * Q0*(1-Q0) * g1 * (1-g1) / (g1 * Q1*(1-Q1) + (1-g1) *Q0*(1-Q0) )) * v*V)})"
"0","      scale_inv <- solve(scale)"
"0","      EIF1 <- (Delta/G)*weights*H_star%*%scale_inv*as.vector(Y-barQ)"
"0","      EIF2 <- weights*H_star%*%scale_inv*as.vector(barQ-Q)"
"0","      EIF <- EIF1 + EIF2"
"0","      "
"0","      var_scaled <- as.matrix(var(EIF))"
"0","      #var_scaled <-  scale_inv %*% var_unscaled  %*%  t(scale_inv)"
"0","      print(""checkConverged"")"
"0","      print(quantile(as.vector(var_scaled)))"
"0","      score <- sum(abs(colMeans_safe(EIF1 + EIF2 )))"
"0","      print(sum(abs(colMeans_safe(EIF1  ))))"
"0","      print(sum(abs(colMeans_safe(EIF2  ))))"
"0","      print(score)"
"0","      if(score <= min(0.5,0.5*mean(sqrt(diag(var_scaled))))/sqrt(n)/log(n)) {"
"0","        print(""converged"")"
"0","        converged_flag <- TRUE"
"0","        break"
"0","      }"
"0","    "
"0","    "
"0","    "
"0","  }"
"0","  "
"0","   "
"0","  # Cheap way of extracting coefficients."
"0","  logOR <- log((Q1*(1-Q0)/((1-Q1)*(Q0))))"
"0","  "
"0","  estimates <- as.vector(coef(suppressWarnings(glm(logOR~V-1, family = gaussian(), data = list(V=V, logOR = logOR )))))"
"0","  "
"0","   "
"0","  "
"0","  var_scaled <-  var_scaled"
"0","  print(head(var_scaled))"
"0","  "
"0","  compute_predictions <- function(W_newer) {"
"0","    V_newer <- model.matrix(formula, data = as.data.frame(W_newer))"
"0","    est_grid <-V_newer%*%estimates"
"0","    se_grid <- apply(V_newer,1, function(m) {"
"0","      sqrt(sum(m * (var_scaled %*%m)))"
"0","    } )"
"0","    preds_new <- data.frame(W_newer, estimate = est_grid, se = se_grid, lower_CI = est_grid - 1.96*se_grid/sqrt(n), upper_CI = est_grid + 1.96*se_grid/sqrt(n))"
"0","    return(preds_new)"
"0","  }"
"0","  "
"0","  preds_new <- compute_predictions(W_new)"
"0","  "
"0","  se <- sqrt(diag(var_scaled))"
"0","  ci <- cbind(estimates, se, estimates - 1.96*se/sqrt(n), estimates + 1.96*se/sqrt(n))"
"0","  colnames(ci) <- c(""coefs"", ""se"", ""lower_CI"", ""upper_CI"")"
"0","  output <- list(coefs = ci, var_mat = var_scaled, logOR_at_W_new = preds_new, pred_function = compute_predictions,   learner_fits = list(A = fit_A, Y = fit_Y), converged_flag = converged_flag)"
"0","  return(output)"
"0","  #######"
"0","  "
"0","}"
"0",""
"0",""
